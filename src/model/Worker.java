package model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.MetaConstants;
import domainapp.basics.util.Tuple;

import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Created by ThangNguyen on 4/2/2017.
 */
public abstract class Worker {
    @DAttr(name = "id", id = true, auto = true, type = DAttr.Type.Integer, mutable = false, optional = false, length = 10, min = 1)
    private Integer id;

    private static Integer idCounter = 1000;

    @DAttr(name = "name", type = DAttr.Type.String, length = 30, optional = false)
    private String name;

    @DAttr(name = "email", type = DAttr.Type.String, length = 30, optional = false)
    private String email;

    @DAttr(name = "address", type = Type.Domain, length = 20, optional = true)
    @DAssoc(ascName = "worker-has-city", role = "worker",
            ascType = AssocType.One2Many, endType = AssocEndType.Many,
            associate = @Associate(type = City.class, cardMin = 1, cardMax = 1))
    private City address;

    @DAttr(name = "phoneNumber", type = DAttr.Type.String, length = 11, optional = true)
    private String phoneNumber;

    @DAttr(name = "startDate", type = DAttr.Type.String, length = 15, optional = false)
    private String startDate;

    @DAttr(name = "task", type = Type.Domain, length = 20, optional = true)
    @DAssoc(ascName = "worker-has-task", role = "worker",
            ascType = AssocType.Many2Many, endType = AssocEndType.Many,
            associate = @Associate(type = Task.class, cardMin = 1, cardMax = MetaConstants.CARD_MORE))
    private Task task;


    private static Map<Tuple, Integer> currNums = new LinkedHashMap<>();

    /**
     * @requires minVal != null /\ maxVal != null
     * @effects update the auto-generated value of attribute <tt>attrib</tt>,
     * specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
     */
    @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
    public static void updateAutoGeneratedValue(
            DAttr attrib,
            Tuple derivingValue,
            Object minVal,
            Object maxVal) throws ConstraintViolationException {
        if (minVal != null && maxVal != null) {
            if (attrib.name().equals("id")) {
                int maxIdVal = (Integer) maxVal;
                if (maxIdVal > idCounter) {
                    idCounter = maxIdVal;
                }
            } else if (attrib.name().equals("code")) {
                String maxCode = (String) maxVal;
                try {
                    int maxCodeNum = Integer.parseInt(maxCode.substring(1));
// current max num for the semester
                    Integer currNum = currNums.get(derivingValue);
                    if (currNum == null || maxCodeNum > currNum) {
                        currNums.put(derivingValue, maxCodeNum);
                    }
                } catch (RuntimeException e) {
                    throw new ConstraintViolationException(
                            ConstraintViolationException.Code.INVALID_VALUE, e, new Object[]{maxCode});
                }
            }
        }
    }


    public Worker(Integer id, String name, String email, City address, String phoneNumber, String startDate, Task task) {
        this.id = nextId(id);
        this.name = name;
        this.email = email;
        this.address = address;
        this.phoneNumber = phoneNumber;
        this.startDate = startDate;
        this.task = task;
    }

    public Worker(String name, String email, City address, String phoneNumber, String startDate, Task task) {
        this(null, name, email, address, phoneNumber, startDate, task);
    }

    public Integer getId() {
        return id;
    }

    public String getName() {

        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public City getAddress() {
        return address;
    }

    public void setAddress(City address) {
        this.address = address;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getStartDate() {
        return startDate;
    }

    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }

    public static Integer nextId(Integer currID) {
        if (currID == null) {
            idCounter++;
            return idCounter;
        } else {
            if (currID > idCounter) {
                idCounter = currID;

            }
            return currID;
        }
    }
}
