package model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.MetaConstants;
import domainapp.basics.util.Tuple;


public class Attendance {
    private static int idCounter;

    @DAttr(name="id",id=true,auto=true,length=3,mutable=false,optional=false,type=DAttr.Type.Integer)
    private int id;

    @DAttr(name = "employee", type=DAttr.Type.Domain,optional=true)
    @DAssoc(ascName="employee-has-attendance", role="attendance",
            ascType=DAssoc.AssocType.One2Many, endType=DAssoc.AssocEndType.One,
            associate =@DAssoc.Associate(type=Employee.class, cardMin=1, cardMax=MetaConstants.CARD_MORE))
    private Employee employee;

    @DAttr(name = "performanceReport", type = DAttr.Type.Domain, length = 20, optional = true)
    @DAssoc(ascName = "performanceReport-has-attendance", role = "attendance",
            ascType = DAssoc.AssocType.One2Many, endType = DAssoc.AssocEndType.Many,
            associate = @DAssoc.Associate(type = PerformanceReport.class, cardMin = 1, cardMax = 1))
    private PerformanceReport performanceReport;

    @DAttr(name="dayAbsence", type=DAttr.Type.Integer,optional=false, mutable = true )
    private int dayAbsence;

    /**
     * Constructor with full params
     * @param id
     * @param employee
     * @param dayAbsence
     */
    public Attendance(Integer id, Employee employee, PerformanceReport performanceReport, Integer dayAbsence) {
        this.id = nextId(id);
        this.employee = employee;
        this.performanceReport = performanceReport;
        this.dayAbsence = dayAbsence;
    }

    /**
     * Constructor with three params
     * @param employee
     * @param performanceReport
     * @param dayAbsence
     */
    public Attendance(Employee employee, PerformanceReport performanceReport, Integer dayAbsence) {
        this(null, employee, performanceReport, dayAbsence);
    }
    
    /**
     * Constructor with two params
     * @param employee
     * @param dayAbsence
     */
    public Attendance(Employee employee, Integer dayAbsence) {
        this(null, employee, null, dayAbsence);
    }
    
    /**
     * Constructor with one params
     * @param employee 
     */
    public Attendance(Employee employee){
        this(null, employee, null, null);
    }
    
    /**
     * Constructor with one params
     * @param dayAbsence
     */
    public Attendance(Integer dayAbsence){
        this(null, null, null, dayAbsence);
    }
    
    /**
     * Set Employee
     * @param employee 
     */
    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    /**
     * Set dayAbsence
     * @param dayAbsence
     */
    public void setDayAbsence(Integer dayAbsence) {
        this.dayAbsence = dayAbsence;
    }

    /**
     * Get id
     * @return 
     */
    public int getId() {
        return id;
    }

    /**
     * Get employee
     * @return 
     */
    public Employee getEmployee() {
        return employee;
    }
    
    /**
     * Get date
     * @return 
     */
    public Integer getDayAbsence() {
        return dayAbsence;
    }

    public PerformanceReport getPerformanceReport() {
        return performanceReport;
    }

    public void setPerformanceReport(PerformanceReport performanceReport) {
        this.performanceReport = performanceReport;
    }

    /**
     * @param attrib
     * @param derivingValue
     * @param minVal
     * @param maxVal
     * @requires minVal != null /\ maxVal != null
     * @effects update the auto-generated value of attribute <tt>attrib</tt>,
     * specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
     */
    @DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
    public static void updateAutoGeneratedValue(
            DAttr attrib,
            Tuple derivingValue,
            Object minVal,
            Object maxVal) throws ConstraintViolationException {

        if (minVal != null && maxVal != null) {
            //TODO: update this for the correct attribute if there are more than one auto attributes of this class 
            int maxIdVal = (Integer) maxVal;
            if (maxIdVal > idCounter) {
                idCounter = maxIdVal;
            }
        }
    }
    /**
     * Generate id for position
     *
     * @param currID
     * @return
     */
    private static Integer nextId(Integer currID) {
        if (currID == null) {
            idCounter++;
            return idCounter;
        } else {
            if (currID > idCounter) {
                idCounter = currID;
            }
            return currID;
        }
    }
}